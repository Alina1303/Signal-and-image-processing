clear all; %очистить всю память
clc; %очистить командные окна
close all; %очистка информации о переменных
format long; %установить отображаемый формат вычислений

%Исходные данные
N = 2048; %число отсчётов
t = 1:N; %вектор времени
ti = 1:129; %интервал построения графика сигнала
Fd = 2048; %частота дискретизации
fi = [250 500 300 350 600 650]; %частоты функции многокомпонентного сигнала
A = [1.0 0.2 0.5 0.3 0.2 0.8]; %амплитуды функции
indx = 2; %индекс частоты, который подлежит удалению
fni = fi ./ Fd; %нормированные частоты
Rp = 1; %параметры уровня пульсации в полосе пропускания (ПП)
Rs = 40; %параметры уровня пульсации в полосе заграждения (ПЗ)

%1 Формирование сигнала из шести компонентов
y = A(1) * sin(2 * pi * fni(1).*t) + A(2) * sin(2 * pi * fni(2).*t) + A(3 ...
    ) * sin(2 * pi * fni(3).*t) + A(4) * sin(2 * pi * fni(4).*t) + A(5 ...
    ) * sin(2 * pi * fni(5).*t) + A(6) * sin(2 * pi * fni(6).*t);

%2 Построение графика сигнала на интервале от 0 до 128
figure
plot(ti-1, y(ti), 'b');
title('График входного сигнала', FontSize=14);
axis tight;
grid on;

%3 Расчёт модуля спектра полученного сигнала и построение его графика
Ys = fft(y, N); %вычисление спектра сигнала y
MYs = (2 / N) * abs(Ys); %вычисление спектра мощности y
figure
plot(t-1, MYs(t), 'b');
title('График модуля спектра входного сигнала', FontSize=14);
axis tight;
grid on;
 
%4 Расчёт порядка фильтра n и вектора частот среза Wn БИХ-фильтра
W1pp = fi(indx) - 35; %вычисление частот границ полос пропускания 
W2pp = fi(indx) + 35; 
fprintf('Граничные частоты полосы пропускания: [%d %d]\n', W1pp, W2pp);
W1ss = fi(indx) - 15; %вычисление частот границ полос заграждения
W2ss = fi(indx) + 15;
fprintf('Граничные частоты полосы заграждения: [%d %d]\n', W1ss, W2ss);
Wp = [2 * W1pp / Fd 2 * W2pp / Fd];
fprintf('Нормированные граничные частоты полосы пропускания: [%f %f]\n', ...
    Wp(1), Wp(2));
Ws = [2 * W1ss / Fd 2 * W2ss / Fd];
fprintf('Нормированные граничные частоты полосы заграждения: [%f %f]\n', ...
    Ws(1), Ws(2));
%Расчёт импульсной характеристики Чебышева 1
[n, Wn] = cheb1ord(Wp, Ws, Rp, Rs);
fprintf('Минимальный порядок фильтра n = %d\n', n);

%5 Расчёт однополосного режекторного БИХ-фильтра для фильтрации сигнала 
%Расчёт фильтра Чебышева 1
[b, a] = cheby1(n, Rp, Wn, 'stop');

%6 Фильтрация полученным фильтром входного сигнала и построение его графика
yf = filter(b, a, y); %фильтрация сигнала функцией filter
figure
plot(ti-1, yf(ti), 'r');
title('График отфильтрованного функцией filter сигнала', FontSize=14);
axis tight;
grid on;

%7 Расчёт модуля спектра после фильтрацииа и построение его графика
YFs = fft(yf, N); %вычисляем спектр сигнала yf
MYF = (2 / N) * abs(YFs); %вычисляем спектр мощности yf
figure
plot(t-1, MYF(t), 'r');
title('График спектра отфильтрованного сигнала', FontSize=14);
axis tight;
grid on;

%8 Построение графиков АЧХ и ФЧХ полученного фильтра
H = freqz(b, a);
AMP = abs(H); %АЧХ
FAZ = angle(H); %ФЧХ
figure
subplot(2, 1, 1);
plot(AMP, 'b');
title('График АЧХ фильтра', FontSize=14);
axis tight;
grid on;
subplot(2, 1, 2);
plot(FAZ, 'r');
title('График ФЧХ фильтра', FontSize=14);
axis tight;
grid on;

%9 Построение карты нулей и полюсов фильтра
figure
zplane(b, a) 
title('Карта нулей и полюсов', FontSize=14);